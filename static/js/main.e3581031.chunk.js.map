{"version":3,"sources":["components/addItem.js","components/listItem.js","components/ListContainer.js","components/link.js","components/navLinks.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","listId","state","id","item","completed","e","newState","target","name","value","this","setState","preventDefault","additem","Card","Body","Form","onSubmit","submitHandler","type","placeholder","onChange","changeHandler","Button","variant","React","Component","ListItem","style","textDecoration","cursor","onClick","mark","remove","ListContainer","Table","listItems","map","i","key","removeButton","markClick","Link","Nav","Item","eventKey","filter","linkClick","NavLink","defaultActiveKey","App","localStorage","getItem","JSON","parse","newItem","concat","setItem","stringify","console","log","items","Container","updateList","removeHandler","toggleCompleted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3581031.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Add extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      id: 0,\r\n      item: \"\",\r\n      completed: false\r\n    }\r\n  \r\n  }\r\n\r\n\r\n//Overwrites state when an item is entered\r\n\r\n  changeHandler(e){\r\n    const newState = {};\r\n    newState[e.target.name] = e.target.value;\r\n    this.setState(newState)\r\n  }\r\n\r\n// creates an id for each item\r\n\r\nlistId = 0;\r\n\r\n// passes items to state in app.js to be rendered as items and increments listId\r\n\r\n  submitHandler(e){\r\n    e.preventDefault();\r\n    if (this.state.item === \"\") {\r\n      return\r\n    }\r\n    this.props.additem(this.listId,this.state.item, this.state.completed);\r\n    this.setState({\r\n      id: 0,\r\n      item: \"\",\r\n      completed: false,\r\n    })\r\n    this.listId ++;\r\n  }\r\n\r\n  render () {\r\n  return (\r\n    \r\n      <Card>\r\n        <Card.Body>\r\n\r\n          <Form onSubmit = {(e) => {this.submitHandler(e)}}>\r\n\r\n          <input \r\n            value = {this.state.item} \r\n            type = \"text\" name = \"item\" \r\n            placeholder=\"Description\" \r\n            onChange = { (e) => this.changeHandler(e) }>\r\n          </input>\r\n\r\n          <Button variant = \"warning\" type = \"submit\">Add</Button>\r\n\r\n          </Form>\r\n\r\n        </Card.Body>\r\n      </ Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Add;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ListItem extends React.Component {\r\n  render () {\r\n  return (\r\n    \r\n      <tr> \r\n\r\n        <td>  \r\n            {this.props.id}\r\n        </td>\r\n\r\n        <td>\r\n           <span style={{textDecoration: this.props.completed ? 'line-through' : 'none', cursor: 'pointer'}} onClick= {this.props.mark}>\r\n           {this.props.item}\r\n           </span>\r\n        </td>\r\n\r\n        <td>\r\n        <Button variant=\"danger\" onClick = {this.props.remove}>Remove</Button>\r\n        </td>\r\n\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from 'react-bootstrap/table';\r\nimport ListItem from './listItem';\r\n\r\nclass ListContainer extends React.Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Item</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.listItems.map((item,i) => (\r\n             <ListItem key = {i} \r\n              id = {item.id} \r\n              item = {item.item} \r\n              completed = {item.completed} \r\n              remove = {()=> this.props.removeButton (item.id)}\r\n              mark = {() => this.props.markClick (item.id)}\r\n              />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListContainer;","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\n\r\n\r\n\r\nclass Link extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey = {this.props.filter} onClick = { () => this.props.linkClick(this.props.filter) }>\r\n              {this.props.filter}\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Link;","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Link from './link';\r\n\r\n\r\n\r\n\r\nclass NavLink extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n\r\n  <Nav variant = \"tabs\" defaultActiveKey = \"All\">\r\n    <Link filter = \"All\" linkClick = { (filter) => this.props.linkClick(filter) }/>\r\n    <Link filter = \"Outstanding\" linkClick = { (filter) => this.props.linkClick(filter) } />\r\n    <Link filter = \"Purchased\" linkClick = { (filter) => this.props.linkClick(filter) } />\r\n  </Nav>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavLink;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport AddItem from './components/addItem';\nimport ListContainer from './components/ListContainer';\nimport NavLink from './components/navLinks'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      listItems: []\n    };\n  }\n\n  componentDidMount() {\n    const listItems = localStorage.getItem(\"list\");\n    this.setState(\n      { listItems: JSON.parse(listItems) || [] }\n    )\n  }\n\n \n  updateList(id, item, completed) {\n    const newItem = {id, item, completed}\n    this.setState((state) => ({\n      listItems: state.listItems.concat(newItem)\n    }), () => localStorage.setItem('list', JSON.stringify(this.state.listItems)))\n  }\n\n  removeHandler(id) {\n    const newState = this.state.listItems.filter((item) => item.id !== id)\n    this.setState({ listItems: newState } , () => localStorage.setItem('list', JSON.stringify(this.state.listItems)))\n  }\n\n  toggleCompleted(id) {\n    const newState = this.state.listItems.map((item) => {\n      if(item.id === id) {\n        item.completed = !item.completed\n        return item  \n      } \n        return item \n    })\n      this.setState((state) => ({ listItems: newState }), () => localStorage.setItem('list', JSON.stringify(this.state.listItems)))\n    }\n\n    linkClick (filter) {\n      console.log(filter)\n      const items = JSON.parse(localStorage.getItem(\"list\"));\n      let newState = [];\n\n      switch(filter) {\n        case \"Purchased\" :\n          newState = items.filter((item) => item.completed === true)\n          this.setState({listItems: newState})\n        break;\n        case \"Outstanding\" :\n          newState = items.filter((item) => item.completed !== true)\n          this.setState({listItems: newState})\n        break;\n        default: \n          this.setState({listItems: items})\n        break;\n      }\n    }\n\n  render () {\n  return (\n     <> \n      <Container>\n        <pre>{JSON.stringify(this.state)}</pre>\n\n        <h1>Shopping List</h1>\n\n        <AddItem  additem = {(id, item, completed) => this.updateList(id, item, completed)}/>\n\n        <NavLink linkClick = { (filter) => this.linkClick(filter) } />\n\n        <ListContainer \n          listItems = {this.state.listItems} \n          removeButton ={(id) => this.removeHandler(id)} \n          markClick = {(id) => this.toggleCompleted(id)}\n        />\n        \n      </Container>\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}