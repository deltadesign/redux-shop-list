{"version":3,"sources":["actions.js","components/addItem.js","components/link.js","components/LinkContainer.js","components/navLinks.js","components/listItem.js","components/ListContainer.js","components/VisibleItems.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["VisibilityFilters","nextId","Add","input","Card","className","Body","Form","onSubmit","e","text","preventDefault","value","trim","props","dispatch","type","id","ref","node","Button","variant","React","Component","connect","Link","Nav","Item","eventKey","this","children","onClick","disabled","active","LinkContainer","state","ownProps","filter","visbilityFilter","NavLinks","defaultActiveKey","ListItem","style","textDecoration","completed","cursor","mark","item","remove","ListContainer","Table","striped","listItems","map","key","getVisibleItems","items","console","log","VisibleItems","visibilityFilter","toggleComplete","removeItem","App","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","_","Object","assign","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce7664c9.chunk.js","sourcesContent":["export const ADD_ITEM = \"ADD_ITEM\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const TOGGLE_ITEM = \"TOGGLE_ITEM\";\r\nexport const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_ITEM\";\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\r\n}\r\n\r\nlet nextId = 0;\r\n\r\nexport function addItem(text) {\r\n  return {\r\n    type: ADD_ITEM,\r\n    id: nextId++,\r\n    text\r\n  }\r\n}\r\n\r\nexport function toggleComplete(id) {\r\n  return {\r\n    type: TOGGLE_ITEM,\r\n    id\r\n  }\r\n}\r\n\r\nexport function removeItem(id) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    id\r\n  }\r\n}\r\n\r\nexport function setVisibilityFilter(filter) {\r\n  return {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport { addItem } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Add extends React.Component {\r\n\r\n\r\n  render () {\r\n    let input;\r\n    return (\r\n    \r\n      <Card className=\"mb-5\">\r\n        <Card.Body>\r\n\r\n          <Form onSubmit = { e => {\r\n            e.preventDefault();\r\n            if (!input.value.trim()) {\r\n              return \r\n            }\r\n              this.props.dispatch(addItem(input.value))\r\n              input.value = ''\r\n          }}\r\n          >\r\n\r\n          <input ref = {node => {input = node}} />\r\n          \r\n          <Button variant = \"warning\" type = \"submit\" className = \"ml-2\" >Add</Button>\r\n\r\n          </Form>\r\n\r\n        </Card.Body>\r\n      </ Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  connect () (Add);\r\n","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\n\r\nclass Link extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n      <>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey = {this.props.children} onClick = {this.props.onClick} disabled = {this.props.active}>\r\n              {this.props.children}\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Link;","import { connect } from 'react-redux';\r\nimport { setVisibilityFilter } from '../actions';\r\nimport Link from './link';\r\n\r\nfunction mapStateToProps (state, ownProps) {\r\n  return {\r\n    active: ownProps.filter === state.visbilityFilter\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch, ownProps) {\r\n  return {\r\n    onClick : () => {\r\n      dispatch(setVisibilityFilter(ownProps.filter))\r\n    }\r\n  }\r\n}\r\n\r\nconst LinkContainer = connect(mapStateToProps, mapDispatchToProps) (Link)\r\n\r\nexport default LinkContainer","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport LinkContainer from './LinkContainer';\r\nimport { VisibilityFilters } from '../actions';\r\n\r\nclass NavLinks extends React.Component {\r\n\r\n  render () {\r\n    return (\r\n\r\n    <Nav variant = \"tabs\" defaultActiveKey = \"All\">\r\n          <LinkContainer filter={VisibilityFilters.SHOW_ALL}>All</LinkContainer>\r\n          <LinkContainer filter={VisibilityFilters.SHOW_ACTIVE}>Outstanding</LinkContainer>\r\n          <LinkContainer filter={VisibilityFilters.SHOW_COMPLETED}>Completed</LinkContainer>\r\n    </Nav>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavLinks;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass ListItem extends React.Component {\r\n  render () {\r\n  return (\r\n    \r\n      <tr> \r\n\r\n        <td>  \r\n            {this.props.id}\r\n        </td>\r\n\r\n        <td>\r\n           <span style={{textDecoration: this.props.completed ? 'line-through' : 'none', cursor: 'pointer'}} onClick= {this.props.mark}>\r\n           {this.props.item}\r\n           </span>\r\n        </td>\r\n\r\n        <td>\r\n        <Button variant=\"outline-danger\" onClick = {this.props.remove}>Remove</Button>\r\n        </td>\r\n\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from 'react-bootstrap/table';\r\nimport ListItem from './listItem';\r\n\r\nclass ListContainer extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Table striped>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Item</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.listItems.map((item) => (\r\n             <ListItem key = {item.id} \r\n              id = {item.id} \r\n              item = {item.item} \r\n              completed = {item.completed} \r\n              remove = {()=> this.props.remove(item.id)}\r\n              mark = {() => this.props.mark(item.id)}\r\n              />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListContainer;","import { connect } from 'react-redux';\r\nimport { toggleComplete } from '../actions';\r\nimport {removeItem } from '../actions';\r\nimport ListContainer from './ListContainer';\r\n\r\nfunction getVisibleItems (items, filter) {\r\n  switch (filter) {\r\n    case 'SHOW_COMPLETED':\r\n      return items.filter(item => item.completed)\r\n    case 'SHOW_ACTIVE':\r\n      return items.filter(item => !item.completed)\r\n    case 'SHOW_ALL':\r\n    default: \r\n      console.log(items)\r\n      return items\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    listItems: getVisibleItems(state.items, state.visibilityFilter)\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    mark: id => {\r\n      dispatch(toggleComplete(id))\r\n    },\r\n    remove: id => {\r\n      dispatch(removeItem(id))\r\n    }\r\n  }\r\n}\r\n\r\nconst VisibleItems = connect(mapStateToProps, mapDispatchToProps) (ListContainer) // send props to list container\r\n\r\nexport default VisibleItems","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Add from './components/addItem';\nimport NavLinks from './components/navLinks';\nimport VisibleItems from './components/VisibleItems';\n\n\nclass App extends React.Component {\n\n  render () {\n  return (\n     <> \n      <Container>\n\n        <h1>Shopping List</h1>\n\n        <Add />\n\n        <NavLinks />\n\n        <VisibleItems />\n\n      </Container>\n    </>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  VisibilityFilters,\r\n  SET_VISIBILITY_FILTER,\r\n  ADD_ITEM,\r\n  REMOVE_ITEM,\r\n  TOGGLE_ITEM\r\n} from './actions'\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nfunction visibilityFilterReducer(state = VisibilityFilters.SHOW_ALL,action) {\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      return action.VisibilityFilters\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction itemreducer (state=[], action) {\r\n  switch (action.type) {\r\n\r\n    case ADD_ITEM:\r\n      return [\r\n        ...state, \r\n        {\r\n          id: action.id,\r\n          item: action.text,\r\n          completed: false\r\n        }\r\n      ]\r\n\r\n    case REMOVE_ITEM:\r\n      return state.filter((_,id) => action.id !== id);\r\n    \r\n    case TOGGLE_ITEM:\r\n      return state.map((item) =>{\r\n        if(item.id === action.id) {\r\n          return Object.assign({},item, { completed: !item.completed\r\n          })\r\n        } return item\r\n      })\r\n      default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  visibilityFilter: visibilityFilterReducer,\r\n  items: itemreducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { rootReducer } from './reducer';\n\nconst store = createStore(rootReducer);\n\n\nReactDOM.render(\n  <Provider store = {store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}